                        ; ************************************
                        ; Title
                        ; ************************************
                        ;
                        ;    Title:          main.68k
                        ;    Author:         René Richard
                        ;    Description:
                        ;
                        ;    Target Hardware:
                        ;        Sega Genesis / Megadrive
                        ;    Assembler:
                        ;        ASMX
                        ;
                        ; LICENSE
                        ;
                        ;    This file is part of 68kTutorials.
                        ;    68kTutorials is free software: you can redistribute it and/or modify
                        ;    it under the terms of the GNU General Public License as published by
                        ;    the Free Software Foundation, either version 3 of the License, or
                        ;    (at your option) any later version.
                        ;    68kTutorials is distributed in the hope that it will be useful,
                        ;    but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ;    GNU General Public License for more details.
                        ;    You should have received a copy of the GNU General Public License
                        ;    along with 68kTutorials.  If not, see <http://www.gnu.org/licenses/>.
                        ;
                        ; ************************************
                        ; COMPILER OPTIONS
                        ; ************************************
                        	LIST MACRO
                        	LIST NOSYM
                        	LIST NOTEMP

                        ; ************************************
                        ; SYSTEM DEFINES
                        ; ************************************
000000                  	include 'sys/sysDef.68k'
                        ; ************************************
                        ; Title
                        ; ************************************
                        ;
                        ;    Title:          sysDef.asm
                        ;    Author:         René Richard
                        ;    Description:
                        ;
                        ;    Target Hardware:
                        ;        Sega Genesis / Megadrive
                        ;    Assembler:
                        ;        ASMX
                        ;
                        ; LICENSE
                        ;
                        ;    This file is part of 68kTutorials.
                        ;    68kTutorials is free software: you can redistribute it and/or modify
                        ;    it under the terms of the GNU General Public License as published by
                        ;    the Free Software Foundation, either version 3 of the License, or
                        ;    (at your option) any later version.
                        ;    Foobar is distributed in the hope that it will be useful,
                        ;    but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ;    GNU General Public License for more details.
                        ;    You should have received a copy of the GNU General Public License
                        ;    along with 68kTutorials.  If not, see <http://www.gnu.org/licenses/>.
                        ;
                        ; ************************************
                        ; VDP Addresses
                        ; ************************************
       = C00000         VDP_DATA				equ $00C00000
       = C00004         VDP_CTRL				equ $00C00004
       = C00008         VDP_HVCOUNTER			equ $00C00008
       = C00011         VDP_PSG					equ $00C00011

                        ; VDP Control Masks
       = 000010         VDP_VSRAM_WRITE			equ $40000010
       = 000010         VDP_VSRAM_READ			equ $00000010
       = 000000         VDP_CRAM_WRITE			equ $C0000000
       = 000020         VDP_CRAM_READ			equ $00000020
       = 000000         VDP_VRAM_WRITE			equ $40000000
       = 000000         VDP_VRAM_READ			equ $00000000

                        ; ************************************
                        ; I/O Addresses
                        ; ************************************
       = A10001         IO_VERSIONNO			equ $00A10001
       = A10003         IO_DATA_1				equ $00A10003
       = A10005         IO_DATA_2				equ $00A10005
       = A10007         IO_DATA_EXP				equ $00A10007
       = A10009         IO_CTRL_1				equ $00A10009
       = A1000B         IO_CTRL_2				equ $00A1000B
       = A1000D         IO_CTRL_EXP				equ $00A1000D
       = A1000F         IO_TXDATA_1				equ $00A1000F
       = A10011         IO_RXDATA_1				equ $00A10011
       = A10013         IO_SCTRL_1				equ $00A10013
       = A10015         IO_TXDATA_2				equ $00A10015
       = A10017         IO_RXDATA_2				equ $00A10017
       = A10019         IO_SCTRL_2				equ $00A10019
       = A1001B         IO_TXDATA_3				equ $00A1001B
       = A1001D         IO_RXDATA_3				equ $00A1001D
       = A1001F         IO_SCTRL_EXP			equ $00A1001F

                        ; ************************************
                        ; Z80 Addresses
                        ; ************************************
       = A00000         Z80_MEMSPACE			equ $00A00000
       = A00000         Z80_RAM					equ $00A00000

                        ; ************************************
                        ; CTRL Addresses
                        ; ************************************
       = A11000         CTRL_MEMMODE			equ $00A11000
       = A11100         CTRL_Z80BUSREQ			equ	$00A11100
       = A11200         CTRL_Z80RESET			equ $00A11200
       = A13000         CTRL_TIME				equ $00A13000
       = A14000         CTRL_TMSS				equ $00A14000

                        ; ************************************
                        ; Other Addresses
                        ; ************************************
       = FF0000         M68K_RAM				equ $00FF0000

                        ; ************************************
                        ; JOY bit numbers 	SACBRLDU
                        ; ************************************
       = 000000         JOY_UP           		equ 0
       = 000001         JOY_DOWN         		equ 1
       = 000002         JOY_LEFT         		equ 2
       = 000003         JOY_RIGHT        		equ 3
       = 000006         JOY_A            		equ 6
       = 000004         JOY_B            		equ 4
       = 000005         JOY_C            		equ 5
       = 000007         JOY_START        		equ 7
000000                  	include 'sys/sysRAM.68k'
                        ; ************************************
                        ; Title
                        ; ************************************
                        ;
                        ;    Title:          sysRAM.68k
                        ;    Author:         René Richard
                        ;    Description:
                        ;
                        ;    Target Hardware:
                        ;        Sega Genesis / Megadrive
                        ;    Assembler:
                        ;        ASMX
                        ;
                        ; LICENSE
                        ;
                        ;    This file is part of 68kTutorials.
                        ;    68kTutorials is free software: you can redistribute it and/or modify
                        ;    it under the terms of the GNU General Public License as published by
                        ;    the Free Software Foundation, either version 3 of the License, or
                        ;    (at your option) any later version.
                        ;    Foobar is distributed in the hope that it will be useful,
                        ;    but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ;    GNU General Public License for more details.
                        ;    You should have received a copy of the GNU General Public License
                        ;    along with 68kTutorials.  If not, see <http://www.gnu.org/licenses/>.
                        ;
                        ; ************************************
                        ; Soft Interrupt Vectors
                        ; ************************************
       = FFFF00         _RAMVECTORSBASE			EQU		$FFFF00
       = FFFF00         vintvector				EQU		_RAMVECTORSBASE+0
       = FFFF04         hintvector				EQU		_RAMVECTORSBASE+4
       = FFFF08         xintvector				EQU		_RAMVECTORSBASE+8
       = FFFF0C         intflags				EQU		_RAMVECTORSBASE+12
       = 000010         _SIZEOFRAMVECTORS		EQU		16

                        ; ************************************
                        ; Joypads
                        ; ************************************
       = FFFF10         _RAMJOYSTATEBASE		EQU		_RAMVECTORSBASE	+ _SIZEOFRAMVECTORS
       = FFFF10         v_joy1State				EQU		_RAMJOYSTATEBASE+0
       = FFFF12         v_joy1Held				EQU		_RAMJOYSTATEBASE+2
       = FFFF14         v_joy2State				EQU		_RAMJOYSTATEBASE+4
       = FFFF16         v_joy2Held				EQU		_RAMJOYSTATEBASE+6
       = 000008         _SIZEOFRAMJOY			EQU		8

                        ; ************************************
                        ; System Timing
                        ; ************************************
       = FFFF18         _SYSTIMINGBASE			EQU		_RAMJOYSTATEBASE + _SIZEOFRAMJOY
       = FFFF18         sysmillisinc			EQU		_SYSTIMINGBASE+0
       = FFFF1A         sysframecnt				EQU		_SYSTIMINGBASE+2


                        ; ************************************
                        ; MACROS
                        ; ************************************
000000                  	include	'sys/sysMacros.68k'
                        ; ************************************
                        ; Title
                        ; ************************************
                        ;
                        ;    Title:          sysMacros.68k
                        ;    Author:         René Richard
                        ;    Description:
                        ;
                        ;    Target Hardware:
                        ;        Sega Genesis / Megadrive
                        ;    Assembler:
                        ;        ASMX
                        ;
                        ; LICENSE
                        ;
                        ;    This file is part of 68kTutorials.
                        ;    68kTutorials is free software: you can redistribute it and/or modify
                        ;    it under the terms of the GNU General Public License as published by
                        ;    the Free Software Foundation, either version 3 of the License, or
                        ;    (at your option) any later version.
                        ;    68kTutorials is distributed in the hope that it will be useful,
                        ;    but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ;    GNU General Public License for more details.
                        ;    You should have received a copy of the GNU General Public License
                        ;    along with 68kTutorials.  If not, see <http://www.gnu.org/licenses/>.
                        ;
                        ; ************************************
                        ; MACROS
                        ; ************************************
                        Z80Reset_m		MACRO
                        	move.w	#$0000, CTRL_Z80RESET
                        	exg.l	A0,A1					; waste some time
                        	exg.l	A1,A0
                        	move.w	#$0100, CTRL_Z80RESET	
                        	ENDM

                        Z80Request_m	MACRO
                        	move.w	#$0100, CTRL_Z80BUSREQ
                        .Wait\?
                        	btst.b	#0, CTRL_Z80BUSREQ
                        	bne.s	.Wait\?
000000                  	ENDM

                        Z80Release_m	MACRO
                        	move.w	#$0000, CTRL_Z80BUSREQ
                        	ENDM

                        sysMacSyncVint_m	MACRO
                        	lea		intflags, A0				; A0 points to intflags
                        .syncVint\?	
                        	btst	#1, (A0)					; test if a Vertical Interrupt occured
                        	beq.s	.syncVint\?					; wait until vint occurs, bit0 set = vint has happened
                        	bclr	#1, (A0)					; clear the intflag	
000000                  	ENDM

                        WaitVBlankStart_m	MACRO
                        .Wait\?
                           	move.w 	VDP_CTRL, D0 			; Move VDP status word to d0
                           	andi.w 	#$0008, D0    			; AND with bit 4 (vblank), result in status register
                        	bne.s	.Wait\?			 		; Branch if not equal (to zero)
000000                  	ENDM

                        WaitVBlankEnd_m		MACRO
                        .Wait\?
                           	move.w 	VDP_CTRL, D0 			; Move VDP status word to d0
                           	andi.w 	#$0008, D0     			; AND with bit 4 (vblank), result in status register
                           	beq.s	.Wait\?  				; Branch if equal (to zero)
000000                  	ENDM

                        ; ************************************
                        ; HEADER AND STARTUP CODE
                        ; ************************************
000000                  	include 'header.68k'
                        ; ************************************
                        ; Title
                        ; ************************************
                        ;
                        ;    Title:          header.asm
                        ;    Author:         René Richard
                        ;    Description:
                        ;
                        ;    Target Hardware:
                        ;        Sega Genesis / Megadrive
                        ;    Assembler:
                        ;        ASMX
                        ;
                        ; LICENSE
                        ;
                        ;    This file is part of 68kTutorials.
                        ;    68kTutorials is free software: you can redistribute it and/or modify
                        ;    it under the terms of the GNU General Public License as published by
                        ;    the Free Software Foundation, either version 3 of the License, or
                        ;    (at your option) any later version.
                        ;    Foobar is distributed in the hope that it will be useful,
                        ;    but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ;    MERCHANTABILITY or FITNESS FOR A  PURPOSE.  See the
                        ;    GNU General Public License for more details.
                        ;    You should have received a copy of the GNU General Public License
                        ;    along with 68kTutorials.  If not, see <http://www.gnu.org/licenses/>.
                        ;
                        ; ******************************************************************
                        ; Sega Megadrive ROM header
                        ; ******************************************************************
000000 00FFFF00         	dc.l   $00FFFF00		; Initial stack pointer value
000004 00000200         	dc.l   EntryPoint      	; Start of program
000008 000003B0         	dc.l   Exception       ; Bus error
00000C 000003B0         	dc.l   Exception       ; Address error
000010 000003B0         	dc.l   Exception       ; Illegal instruction
000014 000003B0         	dc.l   Exception       ; Division by zero
000018 000003B0         	dc.l   Exception       ; CHK exception
00001C 000003B0         	dc.l   Exception       ; TRAPV exception
000020 000003B0         	dc.l   Exception       ; Privilege violation
000024 000003B0         	dc.l   Exception       ; TRACE exception
000028 000003B0         	dc.l   Exception       ; Line-A emulator
00002C 000003B0         	dc.l   Exception       ; Line-F emulator
000030 000003B0         	dc.l   Exception       ; Unused (reserved)
000034 000003B0         	dc.l   Exception       ; Unused (reserved)
000038 000003B0         	dc.l   Exception       ; Unused (reserved)
00003C 000003B0         	dc.l   Exception       ; Unused (reserved)
000040 000003B0         	dc.l   Exception       ; Unused (reserved)
000044 000003B0         	dc.l   Exception       ; Unused (reserved)
000048 000003B0         	dc.l   Exception       ; Unused (reserved)
00004C 000003B0         	dc.l   Exception       ; Unused (reserved)
000050 000003B0         	dc.l   Exception       ; Unused (reserved)
000054 000003B0         	dc.l   Exception       ; Unused (reserved)
000058 000003B0         	dc.l   Exception       ; Unused (reserved)
00005C 000003B0         	dc.l   Exception       ; Unused (reserved)
000060 000003B0         	dc.l   Exception       ; Spurious exception
000064 000003B0         	dc.l   Exception       ; IRQ level 1
000068 000003A8         	dc.l   ExtInterrupt    ; IRQ level 2 (external interrupt)
00006C 000003B0         	dc.l   Exception       ; IRQ level 3
000070 0000037C         	dc.l   HBlankInterrupt ; IRQ level 4 (horizontal retrace interrupt)
000074 000003B0         	dc.l   Exception       ; IRQ level 5
000078 00000384         	dc.l   VBlankInterrupt ; IRQ level 6 (vertical retrace interrupt)
00007C 000003B0         	dc.l   Exception       ; IRQ level 7
000080 000003B0         	dc.l   Exception       ; TRAP #00 exception
000084 000003B0         	dc.l   Exception       ; TRAP #01 exception
000088 000003B0         	dc.l   Exception       ; TRAP #02 exception
00008C 000003B0         	dc.l   Exception       ; TRAP #03 exception
000090 000003B0         	dc.l   Exception       ; TRAP #04 exception
000094 000003B0         	dc.l   Exception       ; TRAP #05 exception
000098 000003B0         	dc.l   Exception       ; TRAP #06 exception
00009C 000003B0         	dc.l   Exception       ; TRAP #07 exception
0000A0 000003B0         	dc.l   Exception       ; TRAP #08 exception
0000A4 000003B0         	dc.l   Exception       ; TRAP #09 exception
0000A8 000003B0         	dc.l   Exception       ; TRAP #10 exception
0000AC 000003B0         	dc.l   Exception       ; TRAP #11 exception
0000B0 000003B0         	dc.l   Exception       ; TRAP #12 exception
0000B4 000003B0         	dc.l   Exception       ; TRAP #13 exception
0000B8 000003B0         	dc.l   Exception       ; TRAP #14 exception
0000BC 000003B0         	dc.l   Exception       ; TRAP #15 exception
0000C0 000003B0         	dc.l   Exception       ; Unused (reserved)
0000C4 000003B0         	dc.l   Exception       ; Unused (reserved)
0000C8 000003B0         	dc.l   Exception       ; Unused (reserved)
0000CC 000003B0         	dc.l   Exception       ; Unused (reserved)
0000D0 000003B0         	dc.l   Exception       ; Unused (reserved)
0000D4 000003B0         	dc.l   Exception       ; Unused (reserved)
0000D8 000003B0         	dc.l   Exception       ; Unused (reserved)
0000DC 000003B0         	dc.l   Exception       ; Unused (reserved)
0000E0 000003B0         	dc.l   Exception       ; Unused (reserved)
0000E4 000003B0         	dc.l   Exception       ; Unused (reserved)
0000E8 000003B0         	dc.l   Exception       ; Unused (reserved)
0000EC 000003B0         	dc.l   Exception       ; Unused (reserved)
0000F0 000003B0         	dc.l   Exception       ; Unused (reserved)
0000F4 000003B0         	dc.l   Exception       ; Unused (reserved)
0000F8 000003B0         	dc.l   Exception       ; Unused (reserved)
0000FC 000003B0         	dc.l   Exception       ; Unused (reserved)

                        ; size    012345678901234567890123456789012345678901234567
000100 534547412047454E 	dc.b "SEGA GENESIS    "									; Console name - 16
000108 4553495320202020
000110 2843296462202020 	dc.b "(C)db   2016.MAR"									; Copyright holder and release date - 16
000118 323031362E4D4152
000120 4442205041545445 	dc.b "DB PATTERNS INTRO TUTORIAL                      "	; Domestic name - 48
000128 524E5320494E5452
000130 4F205455544F5249
000138 414C202020202020
000140 2020202020202020
000148 2020202020202020
000150 4442205041545445 	dc.b "DB PATTERNS INTRO TUTORIAL                      "	; International name - 48
000158 524E5320494E5452
000160 4F205455544F5249
000168 414C202020202020
000170 2020202020202020
000178 2020202020202020
000180 474D20494E545554 	dc.b "GM INTUTORL-04"									; Version number - 48
000188 4F524C2D3034
00018E 1234             	dc.w $1234												; Checksum
000190 4A20202020202020 	dc.b "J               "									; I/O support - 16
000198 2020202020202020
0001A0 00000000         	dc.l $00000000											; Start address of ROM
0001A4 00000460         	dc.l __end												; End address of ROM
0001A8 00FF0000         	dc.l $00FF0000											; Start address of RAM
0001AC 00FFFFFF         	dc.l $00FFFFFF											; End address of RAM
0001B0 00000000         	dc.l $00000000											; SRAM enabled
0001B4 00000000         	dc.l $00000000											; Unused
0001B8 00000000         	dc.l $00000000											; Start address of SRAM
0001BC 00000000         	dc.l $00000000											; End address of SRAM
0001C0 00000000         	dc.l $00000000											; Unused
0001C4 00000000         	dc.l $00000000											; Unused
0001C8 2020202020202020 	dc.b "                                        "			; Notes (unused)
0001D0 2020202020202020
0001D8 2020202020202020
0001E0 2020202020202020
0001E8 2020202020202020
0001F0 4A55452020202020 	dc.b "JUE             "									; Country codesPARTICULAR
0001F8 2020202020202020
000200                  	include 'sys/sysInit.68k'
                        ; ************************************
                        ; Title
                        ; ************************************
                        ;
                        ;    Title:          sysInit.68k
                        ;    Author:         René Richard
                        ;    Description:
                        ;
                        ;    Target Hardware:
                        ;        Sega Genesis / Megadrive
                        ;    Assembler:
                        ;        ASMX
                        ;
                        ; LICENSE
                        ;
                        ;    This file is part of 68kTutorials.
                        ;    68kTutorials is free software: you can redistribute it and/or modify
                        ;    it under the terms of the GNU General Public License as published by
                        ;    the Free Software Foundation, either version 3 of the License, or
                        ;    (at your option) any later version.
                        ;    68kTutorials is distributed in the hope that it will be useful,
                        ;    but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ;    GNU General Public License for more details.
                        ;    You should have received a copy of the GNU General Public License
                        ;    along with 68kTutorials.  If not, see <http://www.gnu.org/licenses/>.
                        ;
                        ; ************************************
                        ; Start of System Initialization
                        ; ************************************

000200                  	ORG		$00000200				; header section should get us to $200
                        									; but ORG in case we made a mistake (ASMX will complain)
000200                  EntryPoint:           				; Entry point address set in ROM header

                        ; ************************************
                        ; Test reset button
                        ; ************************************
000200 4A79 00A10008    	tst.w 	$00A10008  				; Test mystery reset (expansion port reset?)
000206 6600 012C        	bne.w 	Main          			; Branch if Not Equal (to zero) - to Main
00020A 4A79 00A1000C    	tst.w 	$00A1000C	  			; Test reset button
000210 6600 0122        	bne.w 	Main          			; Branch if Not Equal (to zero) - to Main

                        ; ************************************
                        ; Clear RAM
                        ; ************************************
000214 4280             	clr.l	D0						; Place a 0 into d0, ready to copy to each longword of RAM
000216 41F9 00FF0000    	lea		M68K_RAM, A0			; A0 points to beginning of RAM
00021C 223C 00004000    	move.l 	#$00004000, D1     		; Clearing 64k's worth of longwords
000222                  .Clear:
000222 20C0             	move.l 	D0, (A0)+           	; Post-inc faster than Pre-dec (as last tutorial)
000224 51C9 FFFC        	dbra 	D1, .Clear          	; Decrement d0, repeat until depleted
                        	
                        ; ************************************
                        ; Write TMSS, get System Region
                        ; ************************************
000228 323C 0140        	move.w	#(20<<4), D1			; millis timer init (20ms for PAL)
                        									; the millis timer is in D7 and has a binary point at bit4,
00022C 1039 00A10001    	move.b 	IO_VERSIONNO, D0      	; Move Megadrive hardware version to d0
000232 0800 0006        	btst	#6, D0					; Test VMOD bit for region (PAL = 1, NTSC = 0)
000236 6604             	bne.s	.skipForPal
000238 0441 0035        	subi.w	#53, D1					; change millis timer to ~16.7 for NTSC (3.3 * 16 = 52.8)
00023C                  .skipForPal
00023C 31C1 FF18        	move.w	D1, sysmillisinc		; store value to sysregion
000240 0200 000F        	andi.b 	#$0F, D0           		; The version is stored in last four bits, so mask it with 0F
000244 670A             	beq.s 	.SkipTMSS              	; If version is equal to 0, skip TMSS signature
000246 23FC 53454741    	move.l 	#'SEGA', CTRL_TMSS 		; Move the string "SEGA" to $A14000
00024C 00A14000
000250                  .SkipTMSS:

                        ; ************************************
                        ; Init Z80
                        ; ************************************
000250                  	Z80Reset_m
000250 33FC 0000 00A1   	move.w	#$0000, CTRL_Z80RESET
000256 1200
000258 C149             	exg.l	A0,A1					; waste some time
00025A C348             	exg.l	A1,A0
00025C 33FC 0100 00A1   	move.w	#$0100, CTRL_Z80RESET	
000262 1200
000264                  	Z80Request_m
000264 33FC 0100 00A1   	move.w	#$0100, CTRL_Z80BUSREQ
00026A 1100
00026C                  .Wait00001
00026C 0839 0000 00A1   	btst.b	#0, CTRL_Z80BUSREQ
000272 1100
000274 66F6             	bne.s	.Wait00001

                        	; clear the Z80's 8KB of RAM
000276 303C 2000        	move.w	#$2000, D0				; 8KB of Z80 RAM to clear
00027A 43F9 00A00000    	lea		Z80_RAM, A1				; A1 points to Z80 RAM
000280                  .ClearZ80
000280 4219             	clr.b	(A1)+					; clear bytes, $00 is Z80 nop
000282 51C8 FFFC        	dbra	D0, .ClearZ80				

                        	; load simple program to Z80
000286 41F9 0000033A    	lea 	Z80Data, A0	        	; Load address of data into a0
00028C 43F9 00A00000    	lea 	Z80_RAM, A1     		; Copy Z80 RAM address to a1
000292 203C 0000002A    	move.l 	#Z80DataEnd-Z80Data, D0 ; Auto-calculate size of transfer using labels
000298                  .CopyZ80:
000298 12D8             	move.b 	(A0)+, (A1)+        	; Copy data, and increment the source/dest addresses
00029A 51C8 FFFC        	dbra 	D0, .CopyZ80

00029E                  	Z80Reset_m
00029E 33FC 0000 00A1   	move.w	#$0000, CTRL_Z80RESET
0002A4 1200
0002A6 C149             	exg.l	A0,A1					; waste some time
0002A8 C348             	exg.l	A1,A0
0002AA 33FC 0100 00A1   	move.w	#$0100, CTRL_Z80RESET	
0002B0 1200
0002B2                  	Z80Release_m
0002B2 33FC 0000 00A1   	move.w	#$0000, CTRL_Z80BUSREQ
0002B8 1100

                        ; ************************************
                        ; Init PSG
                        ; ************************************
0002BA 13F8 009F 00C0   	move.b	$9F, VDP_PSG			; mutes all PSG channels
0002C0 0011
0002C2 13F8 00BF 00C0   	move.b	$BF, VDP_PSG
0002C8 0011
0002CA 13F8 00DF 00C0   	move.b	$DF, VDP_PSG
0002D0 0011
0002D2 13F8 00FF 00C0   	move.b	$FF, VDP_PSG
0002D8 0011

                        ; ************************************
                        ; Init VDP
                        ;	DO 		- iterations
                        ;	D1.uw 	- register number in VDP
                        ;	D1.lw 	- register value
                        ;	A0 		- pointer to VDP register value array
                        ; ************************************
0002DA 41F9 00000364    	lea 	VDPRegisters, A0   		; Load address of register table into a0
0002E0 203C 00000018    	move.l 	#24, D0           		; 24 registers to write
0002E6 223C 00008000    	move.l 	#$00008000, d1     		; 'Set register 0' command (and clear the rest of d1 ready)

0002EC                  .CopyVDP:
0002EC 1218             	move.b 	(A0)+, D1           	; Move register value to lower byte of d1
0002EE 33C1 00C00004    	move.w 	D1, VDP_CTRL     		; Write command and value to VDP control port
0002F4 D27C 0100        	add.w 	#$0100, D1          	; Increment register #
0002F8 51C8 FFF2        	dbra 	D0, .CopyVDP

                        ; ************************************
                        ; Init IO Ports
                        ; ************************************
0002FC 13FC 0040 00A1   	move.b 	#$40, IO_CTRL_1	  		; Controller port 1 CTRL, TH = output
000302 0009
000304 13FC 0040 00A1   	move.b 	#$40, IO_CTRL_2	 		; Controller port 2 CTRL, TH = output
00030A 000B
00030C 13FC 0000 00A1   	move.b 	#$00, IO_CTRL_EXP 		; EXP port CTRL
000312 000D
000314 13FC 0040 00A1   	move.b	#$40, IO_DATA_1			; Idle with TH = '1'
00031A 0003
00031C 13FC 0040 00A1   	move.b	#$40, IO_DATA_2			; Idle with TH = '1'	
000322 0005

                        ; ************************************
                        ; Cleanup
                        ; ************************************
000324 41F9 00FF0000    	lea 	M68K_RAM, A0     		; A0 points to $00 value in RAM (has been cleared)
00032A 4CD0 7EFF        	movem.l (A0), D0-D7/A1-A6  		; Multiple move zero to all registers
00032E 91C8             	suba.l	A0, A0					; Clear A0

                        	; Init status register (no trace, supervisor mode, all interrupt levels enabled, clear condition code bits)
000330 46FC 2000        	move 	#$2000, SR

                        ; ************************************
                        ; Main
                        ; ************************************
000334                  Main:
000334 4EF9 00000410    	jmp __main 						; Begin external main

                        ; ************************************
                        ; Data
                        ; ************************************

00033A                  Z80Data:
00033A AF01D91F            	dc.w $af01, $d91f
00033E 11270021            	dc.w $1127, $0021
000342 2600F977            	dc.w $2600, $f977
000346 EDB0DDE1            	dc.w $edb0, $dde1
00034A FDE1ED47            	dc.w $fde1, $ed47
00034E ED4FD1E1            	dc.w $ed4f, $d1e1
000352 F108D9C1            	dc.w $f108, $d9c1
000356 D1E1F1F9            	dc.w $d1e1, $f1f9
00035A F3ED5636            	dc.w $f3ed, $5636
00035E E9E98104            	dc.w $e9e9, $8104
000362 8F01                	dc.w $8f01
000364                  Z80DataEnd:

000364                  VDPRegisters:
000364 04               	dc.b 	$04 			; 0: Horiz. interrupt off
000365 14               	dc.b 	$14 			; 1: DMA on, V28 mode (40 cells vertically), Genesis mode on
000366 30                  	dc.b 	($C000>>10) 	; 2: Pattern table for Scroll Plane A at $C000 (bits 3-5)
000367 3C                  	dc.b 	($F000>>10)	 	; 3: Pattern table for Window Plane at $F000 (bits 1-5)
000368 07                  	dc.b 	($E000>>13)	 	; 4: Pattern table for Scroll Plane B at $A000 (bits 0-2)
000369 6C                  	dc.b 	($D800>>9) 		; 5: Sprite table at $E000 (bits 0-6)
00036A 00                  	dc.b 	$00 			; 6: Unused
00036B 00                  	dc.b 	$00 			; 7: Background colour - bits 0-3 = colour, bits 4-5 = palette
00036C 00                  	dc.b 	$00 			; 8: Unused
00036D 00                  	dc.b 	$00 			; 9: Unused
00036E FF                  	dc.b 	$FF 			; 10: Frequency of Horiz. interrupt
00036F 00                  	dc.b 	$00 			; 11: External interrupts off, V/H scrolling on
000370 81                  	dc.b 	$81 			; 12: Shadows and highlights off, interlace off, H40 mode (64 cells horizontally)
000371 37                  	dc.b 	($DC00>>10)	 	; 13: Horiz. scroll table at $DC00 (bits 0-5)
000372 00                  	dc.b 	$00 			; 14: Unused
000373 00                  	dc.b 	$00 			; 15: Autoincrement off
000374 01                  	dc.b 	$01 			; 16: Vert. scroll 32, Horiz. scroll 64
000375 00                  	dc.b 	$00 			; 17: Window Plane X pos
000376 00                  	dc.b 	$00 			; 18: Window Plane Y pos
000377 FFFF             	dc.w	$FFFF			; 19,20 : DMA length
000379 00                  	dc.b 	$00 			; 21: DMA source address lo byte
00037A 00                  	dc.b 	$00 			; 22: DMA source address mid byte
00037B 00                  	dc.b 	$00 			; 23: DMA source address hi byte, memory-to-VRAM mode (bits 6-7)
00037C                  VDPRegistersEnd:
00037C                  	include 'sys/sysInterrupts.68k'
                        ; ************************************
                        ; Title
                        ; ************************************
                        ;
                        ;    Title:          sysInterrupts.68k
                        ;    Author:         René Richard
                        ;    Description:
                        ;
                        ;    Target Hardware:
                        ;        Sega Genesis / Megadrive
                        ;    Assembler:
                        ;        ASMX
                        ;
                        ; LICENSE
                        ;
                        ;    This file is part of 68kTutorials.
                        ;    68kTutorials is free software: you can redistribute it and/or modify
                        ;    it under the terms of the GNU General Public License as published by
                        ;    the Free Software Foundation, either version 3 of the License, or
                        ;    (at your option) any later version.
                        ;    68kTutorials is distributed in the hope that it will be useful,
                        ;    but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ;    GNU General Public License for more details.
                        ;    You should have received a copy of the GNU General Public License
                        ;    along with 68kTutorials.  If not, see <http://www.gnu.org/licenses/>.
                        ;
                        ; ************************************
                        ; Horizontal Interrupts
                        ; ************************************
00037C                  HBlankInterrupt:
00037C 08F8 0000 FF0C   	bset	#0, intflags				; set hintflag
000382 4E73             	rte

                        ; ************************************
                        ; Vertical Interrupts
                        ; ************************************
                        ;{
000384                  VBlankInterrupt:
000384 5278 FF1A        	addq.w	#1, sysframecnt				; increment vint counter
000388 DEB8 FF18        	add.l	sysmillisinc, D7			; D7 = global millis counter
00038C 08F8 0001 FF0C   	bset	#1, intflags				; set vintflag
000392 4AB8 FF00        	tst.l	vintvector					; test vintvector
000396 670E             	beq.s	.noVector					; if vintvector = 0, get out of here!
000398                  .vectorValid
000398 48E7 FEFE        	movem.l D0-D6/A0-A6, -(SP)			; push context to stack
00039C 2078 FF00        	movea.l	vintvector, A0				; put vintvector in A0
0003A0 4E90             	jsr		(A0)						; jsr to vintvector	
0003A2 4CDF 7F7F        	movem.l (SP)+, D0-D6/A0-A6			; pop context from stack
0003A6                  .noVector
0003A6 4E73                	rte									; return to main code
                        ;}

                        ; ************************************
                        ; External Interrupts
                        ; ************************************
0003A8                  ExtInterrupt:
0003A8 08F8 0002 FF0C   	bset	#2, intflags				; set xintflag
0003AE 4E73             	rte

                        ; ************************************
                        ; Macros
                        ; ************************************
                        sysInt_VDPDisableHInt	MACRO
                        	move.w	#0x8004, VDP_CTRL
                        	ENDM

                        sysInt_VDPEnableHInt	MACRO
                        	move.w	#0x8014, VDP_CTRL
                        	ENDM

                        ; ************************************
                        ; Exception
                        ; ************************************
0003B0                  Exception:
0003B0 4E72 2700           	stop #$2700 						; Halt CPU

0003B4                  	include 'sys/sysJoypad.68k'
                        ; ************************************
                        ; Title
                        ; ************************************
                        ;
                        ;    Title:          sysJoypad.68k
                        ;    Author:         René Richard
                        ;    Description:
                        ;
                        ;    Target Hardware:
                        ;        Sega Genesis / Megadrive
                        ;    Assembler:
                        ;        ASMX
                        ;
                        ; LICENSE
                        ;
                        ;    This file is part of 68kTutorials.
                        ;    68kTutorials is free software: you can redistribute it and/or modify
                        ;    it under the terms of the GNU General Public License as published by
                        ;    the Free Software Foundation, either version 3 of the License, or
                        ;    (at your option) any later version.
                        ;    68kTutorials is distributed in the hope that it will be useful,
                        ;    but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ;    GNU General Public License for more details.
                        ;    You should have received a copy of the GNU General Public License
                        ;    along with 68kTutorials.  If not, see <http://www.gnu.org/licenses/>.
                        ;
                        ; ************************************
                        ; JOYPAD_ReadPad01:
                        ;
                        ; destroys:
                        ;		A0, A1, D5, D6
                        ; returns:
                        ;		D6 = SACBRLDU
                        ;		joy1State (RAM) = D6		
                        ; ************************************
0003B4                  JOYPAD_ReadPad01:
0003B4 41F9 00A10003    	lea		IO_DATA_1, A0				; load data_1 address
0003BA 43F8 FF10        	lea		v_joy1State, A1				; point to RAM placeholder for joystate
0003BE 1C10             	move.b	(A0), D6					; read status j1 = 00CBRLDU
0003C0 10BC 0000        	move.b 	#$00, (A0)					; set TH low
0003C4 4E71             	nop									; wait to settle
0003C6 4E71             	nop									;
0003C8 1A10             	move.b  (A0), D5					; read status = 00SA00DU
0003CA E51D             	rol.b	#2, D5						; SA00DU??
0003CC 0205 00C0        	andi.b	#$C0, D5					; SA000000
0003D0 8C05             	or.b	D5, D6						; D6 = SACBRLDU
0003D2 4606             	not.b	D6							; invert, 1 = pressed
0003D4 10BC 0040        	move.b	#$40, (A0)					; set TH high for next pass
0003D8 3286             	move.w	D6, (A1)					; store to RAM
0003DA 4E75             	rts
                        	
                        ; ************************************
                        ; sysJoy_Read3ButtonBoth
                        ;
                        ; destroys:
                        ;		A0, A1, D0, D1
                        ; ************************************					
0003DC                  sysJoy_Read3Button:
0003DC 41F9 00A10003    	lea		IO_DATA_1, A0				; load data_1 address
0003E2 43F8 FF10        	lea		v_joy1State, A1				; point to RAM placeholder for joystate
0003E6 6102             	bsr.s	.read						;
0003E8 5448             	addq.w	#2, A0						;

0003EA                  .read
0003EA 1010             	move.b	(A0), D0					; read status of j1 = 00CBRLDU, TH already high
0003EC 10BC 0000        	move.b 	#$00, (A0)					; set TH low
0003F0 4E71             	nop									; wait to settle
0003F2 4E71             	nop									;
0003F4 1210             	move.b  (A0), D1					; read status  = 00SA00DU
0003F6 10BC 0040        	move.b 	#$40, (A0)					; set TH high for next pass
0003FA E519             	rol.b	#2, D1						; SA00DU??
0003FC 0201 00C0        	andi.b	#$C0, D1					; SA000000
000400 8001             	or.b	D1, D0						; D0.b = SACBRLDU j1
000402 4600             	not.b	D0							; 1 = pressed
000404 3211             	move.w	(A1), D1					; get previous joypad state
000406 B141             	eor.w	D0, D1						; diff current with previous
000408 32C0             	move.w	D0, (A1)+					; store current joypad state
00040A C240             	and.w	D0, D1
00040C 32C1             	move.w	D1, (A1)+					; store held joypad state
00040E 4E75             	rts

                        ; ************************************
                        ; USER PROGRAM
                        ; ************************************
000410                  __main:
000410                  	include 'tutorial05.68k'
                        ; ************************************
                        ; Title
                        ; ************************************
                        ;
                        ;    Title:          tutorial05.68k
                        ;    Author:         René Richard
                        ;    Description:
                        ;
                        ;    Target Hardware:
                        ;        Sega Genesis / Megadrive
                        ;    Assembler:
                        ;        ASMX
                        ;
                        ; LICENSE
                        ;
                        ;    This file is part of 68kTutorials.
                        ;    68kTutorials is free software: you can redistribute it and/or modify
                        ;    it under the terms of the GNU General Public License as published by
                        ;    the Free Software Foundation, either version 3 of the License, or
                        ;    (at your option) any later version.
                        ;    68kTutorials is distributed in the hope that it will be useful,
                        ;    but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ;    GNU General Public License for more details.
                        ;    You should have received a copy of the GNU General Public License
                        ;    along with 68kTutorials.  If not, see <http://www.gnu.org/licenses/>.
                        ;
                        ; ************************************
                        ; Tutorial 05
                        ; ************************************
000410                  Tutorial05Entry:
                        			
000410                  	sysMacSyncVint_m					; sync to vint
000410 41F8 FF0C        	lea		intflags, A0				; A0 points to intflags
000414                  .syncVint00004	
000414 0810 0001        	btst	#1, (A0)					; test if a Vertical Interrupt occured
000418 67FA             	beq.s	.syncVint00004					; wait until vint occurs, bit0 set = vint has happened
00041A 0890 0001        	bclr	#1, (A0)					; clear the intflag	
                        	

00041E                  Loop:
00041E 60FE             	bra.s	Loop
                        	
000420                  Pattern0:
000420 21000001         	dc.l	$21000001
000424 12100000         	dc.l	$12100000
000428 01210000         	dc.l	$01210000
00042C 00121000         	dc.l	$00121000
000430 00012100         	dc.l	$00012100
000434 00001210         	dc.l	$00001210
000438 00000121         	dc.l	$00000121
00043C 10000012         	dc.l	$10000012

000440                  Pattern1:
000440 00000000         	dc.l	$00000000
000444 01111110         	dc.l	$01111110
000448 01022010         	dc.l	$01022010
00044C 01233210         	dc.l	$01233210
000450 01233210         	dc.l	$01233210
000454 01022010         	dc.l	$01022010
000458 01111110         	dc.l	$01111110
00045C 00000000         	dc.l	$00000000
000460                  __end:

                        ; debug in MESS using
                        ; mess genesis -cart out/rom.bin -window -debug

00000 Total Error(s)

