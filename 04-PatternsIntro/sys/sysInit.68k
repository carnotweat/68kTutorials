; ******************************************************************
; SYSTEM INITIALIZATION
;{******************************************************************
;
;    Title:          sysInit.68k
;    Author:         Ren√© Richard
;    Description:
;        
;    Target Hardware:
;        Sega Genesis / Megadrive
;    Assembler:
;        ASMX
;
; LICENSE
; 
;    This file is part of 68kTutorials.
;    68kTutorials is free software: you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation, either version 3 of the License, or
;    (at your option) any later version.
;    68kTutorials is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;    You should have received a copy of the GNU General Public License
;    along with 68kTutorials.  If not, see <http://www.gnu.org/licenses/>.
;
;}******************************************************************

; ******************************************************************
; System Initialization Entry Point
;{******************************************************************

	ORG		0x00000200				; header section should get us to 0x200
									; but ORG in case we made a mistake (ASMX will complain)
EntryPoint:           				; Entry point address set in ROM header
	tst.w 	0x00A10008  			; Test mystery reset (expansion port reset?)
	bne.w 	Main          			; Branch if Not Equal (to zero) - to Main
	tst.w 	0x00A1000C	  			; Test reset button
	bne.w 	Main          			; Branch if Not Equal (to zero) - to Main
;}******************************************************************

; ******************************************************************
; Clear 68k RAM
;{******************************************************************
	clr.l	d0						; Place a 0 into d0, ready to copy to each longword of RAM
	lea		M68K_RAM, a0			; A0 points to beginning of RAM
	move.l 	0x00004000, d1     		; Clearing 64k's worth of longwords
.Clear:
	move.l 	d0, (a0)+           	; Post-inc faster than Pre-dec (as last tutorial)
	dbra 	d1, .Clear          	; Decrement d0, repeat until depleted
;}******************************************************************

; ******************************************************************
; Write TMSS and Get System Region
;{******************************************************************
	move.w	#(20<<4), d1			; millis timer init (20ms for PAL)
									; the millis timer is in D7 and has a binary point at bit4, 
	move.b 	IO_VERSIONNO, d0      	; Move Megadrive hardware version to d0
	btst	#6, d0					; Test VMOD bit for region (PAL = 1, NTSC = 0)
	bne.s	.skipForPal
	subi.w	#53, d1					; change millis timer to ~16.7 for NTSC (3.3 * 16 = 52.8)
.skipForPal
	move.w	d1, sysmillisinc		; store value to sysregion
	andi.b 	#0x0F, d0           		; The version is stored in last four bits, so mask it with 0F
	beq.s 	.SkipTMSS              	; If version is equal to 0, skip TMSS signature
	move.l 	#'SEGA', CTRL_TMSS 		; Move the string "SEGA" to 0xA14000
.SkipTMSS:
;}******************************************************************

; ******************************************************************
; Z80 Initialization
;{******************************************************************
	Z80Reset_m
	Z80Request_m

	; clear the Z80's 8KB of RAM
	move.w	#0x2000, d0				; 8KB of Z80 RAM to clear
	lea		Z80_RAM, a1				; A1 points to Z80 RAM
.ClearZ80
	clr.b	(a1)+					; clear bytes, 0x00 is Z80 nop
	dbra	d0, .ClearZ80				

	; load simple program to Z80
	lea 	Z80Data, a0	        	; Load address of data into a0
	lea 	Z80_RAM, a1     		; Copy Z80 RAM address to a1
	move.l 	#Z80DataEnd-Z80Data, d0 ; Auto-calculate size of transfer using labels
.CopyZ80:
	move.b 	(a0)+, (a1)+        	; Copy data, and increment the source/dest addresses
	dbra 	d0, .CopyZ80

	Z80Reset_m
	Z80Release_m
;}******************************************************************

; ******************************************************************
; PSG Initialization
;{******************************************************************
	move.b	#0x9F, VDP_PSG			; mutes all PSG channels
	move.b	#0xBF, VDP_PSG
	move.b	#0xDF, VDP_PSG
	move.b	#0xFF, VDP_PSG
;}******************************************************************

; ******************************************************************
; VDP Initialization
;	DO 		- iterations
;	D1.uw 	- register number in VDP
;	D1.lw 	- register value
;	A0 		- pointer to VDP register value array 
;{******************************************************************
	lea 	VDPRegisters, a0   		; Load address of register table into a0
	move.l 	#24, d0           		; 24 registers to write
	move.l 	#0x00008000, d1     	; 'Set register 0' command (and clear the rest of d1 ready)

.CopyVDP:
	move.b 	(a0)+, d1           	; Move register value to lower byte of d1
	move.w 	d1, VDP_CTRL     		; Write command and value to VDP control port
	add.w 	#0x0100, d1          	; Increment register #
	dbra 	d0, .CopyVDP
;}******************************************************************

; ******************************************************************
; IO Ports Initialization
;{******************************************************************
	move.b 	#0x40, IO_CTRL_1	  	; Controller port 1 CTRL, TH = output
	move.b 	#0x40, IO_CTRL_2	 	; Controller port 2 CTRL, TH = output
	move.b 	#0x00, IO_CTRL_EXP 		; EXP port CTRL
	move.b	#0x40, IO_DATA_1		; Idle with TH = '1'
	move.b	#0x40, IO_DATA_2		; Idle with TH = '1'	
;}******************************************************************

; ******************************************************************
; Cleanup
;{******************************************************************
	lea 	M68K_RAM, a0     		; A0 points to 0x00 value in RAM (has been cleared)
	movem.l (a0), d0-d7/a1-a6  		; Multiple move zero to all registers
	suba.l	a0, a0					; Clear A0

	; Init status register (no trace, supervisor mode, all interrupt levels enabled, clear condition code bits)
	move 	#0x2000, sr
;}******************************************************************

; ******************************************************************
; Vector to User Program
;{******************************************************************

Main:
	jmp __main 						; Begin external main
;}******************************************************************

; ******************************************************************
; Data Section
;{******************************************************************

Z80Data:
   	dc.w 	0xaf01, 0xd91f
   	dc.w 	0x1127, 0x0021
   	dc.w 	0x2600, 0xf977
   	dc.w 	0xedb0, 0xdde1
   	dc.w 	0xfde1, 0xed47
   	dc.w 	0xed4f, 0xd1e1
   	dc.w 	0xf108, 0xd9c1
   	dc.w 	0xd1e1, 0xf1f9
   	dc.w 	0xf3ed, 0x5636
   	dc.w 	0xe9e9, 0x8104
   	dc.w 	0x8f01
Z80DataEnd:
   
VDPRegisters:
	dc.b 	0x04 				; 0: Horiz. interrupt off
	dc.b 	0x14 				; 1: DMA on, V28 mode (40 cells vertically), Genesis mode on
   	dc.b 	(0xC000>>10) 		; 2: Pattern table for Scroll Plane A at 0xC000 (bits 3-5)
   	dc.b 	(0xF000>>10)	 	; 3: Pattern table for Window Plane at 0xF000 (bits 1-5)
   	dc.b 	(0xE000>>13)	 	; 4: Pattern table for Scroll Plane B at 0xA000 (bits 0-2)
   	dc.b 	(0xD800>>9) 		; 5: Sprite table at 0xE000 (bits 0-6)
   	dc.b 	0x00 				; 6: Unused
   	dc.b 	0x00 				; 7: Background colour - bits 0-3 = colour, bits 4-5 = palette
   	dc.b 	0x00 				; 8: Unused
   	dc.b 	0x00 				; 9: Unused
   	dc.b 	0xFF 				; 10: Frequency of Horiz. interrupt
   	dc.b 	0x00 				; 11: External interrupts off, V/H scrolling on
   	dc.b 	0x81 				; 12: Shadows and highlights off, interlace off, H40 mode (64 cells horizontally)
   	dc.b 	(0xDC00>>10)	 	; 13: Horiz. scroll table at 0xDC00 (bits 0-5)
   	dc.b 	0x00 				; 14: Unused
   	dc.b 	0x00 				; 15: Autoincrement off
   	dc.b 	0x01 				; 16: Vert. scroll 32, Horiz. scroll 64
   	dc.b 	0x00 				; 17: Window Plane X pos
   	dc.b 	0x00 				; 18: Window Plane Y pos
	dc.w	0xFFFF				; 19,20 : DMA length
   	dc.b 	0x00 				; 21: DMA source address lo byte
   	dc.b 	0x00 				; 22: DMA source address mid byte
   	dc.b 	0x00 				; 23: DMA source address hi byte, memory-to-VRAM mode (bits 6-7)
VDPRegistersEnd:
;}******************************************************************
